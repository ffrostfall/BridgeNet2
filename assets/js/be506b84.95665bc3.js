"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[788],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(n),p=i,u=h["".concat(c,".").concat(p)]||h[p]||f[p]||o;return n?r.createElement(u,a(a({ref:t},d),{},{components:n})):r.createElement(u,a({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9535:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={},a="Technical Details",s={unversionedId:"Technical Details",id:"Technical Details",title:"Technical Details",description:"BridgeNet creates a few instances in the ReplicatedStorage root:",source:"@site/docs/Technical Details.md",sourceDirName:".",slug:"/Technical Details",permalink:"/BridgeNet2/docs/Technical Details",draft:!1,editUrl:"https://github.com/ffrostflame/bridgenet/edit/main/docs/Technical Details.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Identifiers",permalink:"/BridgeNet2/docs/Identifiers"},next:{title:"BridgeNet2",permalink:"/BridgeNet2/docs/intro"}},c={},l=[{value:"It&#39;s worth noting that <code>Reference</code> functions (<code>ReferenceBridge</code> and <code>ReferenceIdentifier</code>) have very different behavior depending on if the caller is the client or the server. For example: <code>ReferenceIdentifier</code> can yield on the client, but will never yield on the server.",id:"its-worth-noting-that-reference-functions-referencebridge-and-referenceidentifier-have-very-different-behavior-depending-on-if-the-caller-is-the-client-or-the-server-for-example-referenceidentifier-can-yield-on-the-client-but-will-never-yield-on-the-server",level:3}],d={toc:l};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"technical-details"},"Technical Details"),(0,i.kt)("p",null,"BridgeNet creates a few instances in the ReplicatedStorage root:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"- `MetaRemoteEvent` (RemoteEvent)\n    This is how BridgeNet2 handles meta messages (e.g. connecting players)\n- `DataRemoteEvent` (RemoteEvent)\n    This is the actual remote that sends data through\n- `IdentifierStorage` (Folder)\n    This is the folder that identifiers are passed through- it uses attributes to store them\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't touch any of these instances unless you know what you're doing. They can easily break BridgeNet2 if they're even slightly altered.")),(0,i.kt)("h3",{id:"its-worth-noting-that-reference-functions-referencebridge-and-referenceidentifier-have-very-different-behavior-depending-on-if-the-caller-is-the-client-or-the-server-for-example-referenceidentifier-can-yield-on-the-client-but-will-never-yield-on-the-server"},"It's worth noting that ",(0,i.kt)("inlineCode",{parentName:"h3"},"Reference")," functions (",(0,i.kt)("inlineCode",{parentName:"h3"},"ReferenceBridge")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"ReferenceIdentifier"),") have very different behavior depending on if the caller is the client or the server. For example: ",(0,i.kt)("inlineCode",{parentName:"h3"},"ReferenceIdentifier")," can yield on the client, but will never yield on the server."),(0,i.kt)("p",null,"There are two processes in BridgeNet2: ",(0,i.kt)("inlineCode",{parentName:"p"},"ServerProcess")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientProcess"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"ServerProcess")," handles communication from the server to the client using the format ",(0,i.kt)("inlineCode",{parentName:"p"},"{ [identifierName] = { {uniqueMessage}, {otherUniqueMessage} } }"),". It is more efficient to use the same bridge for multiple messages, but identifiers can be used to bypass this limitation. The ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientProcess")," handles communication from the client to the server using the format ",(0,i.kt)("inlineCode",{parentName:"p"},'{ [even] = "identifier", [odd] = {uniqueMessage} }'),"."),(0,i.kt)("p",null,"Identifiers in BridgeNet are generated by the server and use a combination of attributes and string packing to create unique numbers. On the client, identifiers can be accessed using ",(0,i.kt)("inlineCode",{parentName:"p"},".FromIdentifier()"),", but it is safer to use ",(0,i.kt)("inlineCode",{parentName:"p"},".ReferenceIdentifier()")," as it yields until the identifier is loaded. The server keeps track of the number of identifiers in use and uses this to generate a new identifier when needed."),(0,i.kt)("p",null,"You can find a lot of general knowledge on how Roblox does networking ",(0,i.kt)("a",{parentName:"p",href:"https://devforum.roblox.com/t/in-depth-information-about-robloxs-remoteevents-instance-replication-and-physics-replication-w-sources/1847340"},"here")))}f.isMDXComponent=!0}}]);