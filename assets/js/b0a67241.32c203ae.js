"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[304],{84160:e=>{e.exports=JSON.parse('{"functions":[{"name":"RateLimit","desc":"Sets the rate limit, cannot be used client-sided.","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","ignore":true,"source":{"line":32,"path":"src/Client/ClientBridge.luau"}},{"name":"DisableRateLimit","desc":"Disables the rate limit, cannot be used client-sided.","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","ignore":true,"source":{"line":43,"path":"src/Client/ClientBridge.luau"}},{"name":"InboundMiddleware","desc":"Sets some middleware to run when a bridge is fired from the server. ","params":[{"name":"middlewareTable","desc":"","lua_type":"{(object: any) -> any}"}],"returns":[],"function_type":"method","source":{"line":53,"path":"src/Client/ClientBridge.luau"}},{"name":"OutboundMiddleware","desc":"Sets some middleware to run when a bridge is fired from the local client. ","params":[{"name":"middlewareTable","desc":"","lua_type":"{(object: any) -> any}"}],"returns":[],"function_type":"method","source":{"line":70,"path":"src/Client/ClientBridge.luau"}},{"name":"Fire","desc":"Fires the bridge locally, which can then be recieved from the server along with packet data sent along.","params":[{"name":"content","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":87,"path":"src/Client/ClientBridge.luau"}},{"name":"Connect","desc":"Connects the bridge to any events recieved from the server, this is when inbound middleware is ran. This shares identical behavior with [RemoteEvent.OnServerEvent:Connect].","params":[{"name":"callback","desc":"","lua_type":"(content: Types.Content) -> ()"},{"name":"name","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":143,"path":"src/Client/ClientBridge.luau"}},{"name":"Wait","desc":"Connects the bridge to any events recieved from the server, this is when inbound middleware is ran. This shares identical behavior with [RemoteEvent.OnServerEvent:Wait].","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","yields":true,"source":{"line":229,"path":"src/Client/ClientBridge.luau"}},{"name":"InvokeServerAsync","desc":"Invokes the server, then returns a value afterwards. This function yields the thread until content is recieved.","params":[{"name":"content","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","yields":true,"source":{"line":247,"path":"src/Client/ClientBridge.luau"}},{"name":"Once","desc":"Connects the bridge to any events recieved from the server, this is when inbound middleware is ran. This shares identical behavior with [clientBridgePrototype:Connect] with the difference being that the event instantly disconnects on recieved.","params":[{"name":"func","desc":"","lua_type":"(content: Types.Content) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","source":{"line":271,"path":"src/Client/ClientBridge.luau"}},{"name":"Destroy","desc":"Destroys the bridge it was called on.","params":[],"returns":[],"function_type":"method","source":{"line":287,"path":"src/Client/ClientBridge.luau"}}],"properties":[],"types":[],"name":"ClientBridge","desc":"This class handles the client-sided interface of BridgeNet2.","source":{"line":17,"path":"src/Client/ClientBridge.luau"}}')}}]);