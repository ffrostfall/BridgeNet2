"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[205],{53855:e=>{e.exports=JSON.parse('{"functions":[{"name":"NumberToBestForm","desc":"Takes a number, and converts it into its most network efficient form. This works because a number is 9 bytes- but strings are (stringLen)+2,\\nso a 1-character string to store a 1-digit number is more efficient than sending it as an actual number. This is way better- and it shows up\\nat any real, practical scale. If you send this number over, you should **always** be calling tonumber on it! That is NOT optional.\\n\\n```lua\\n-- \\"Example hexadecimal string\\" in ASCII\\nlocal smallNumber = 4\\nlocal bigNumber = 1000000000\\n\\nlocal smallNumberBestForm = BridgeNet2.NumberToBestForm(smallNumber)\\nprint(typeof(smallNumberBestForm)) -- prints \\"string\\"\\n\\nlocal bigNumberBestForm = BridgeNet2.NumberToBestForm(bigNumber)\\nprint(typeof(bigNumberBestForm)) -- prints \\"number\\"\\n```","params":[{"name":"number","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"string | number"}],"function_type":"static","source":{"line":75,"path":"src/init.luau"}},{"name":"ToHex","desc":"Converts a string consisting of ASCII characters into hexadecimal. This is useful for representing\\nbinary strings and other human unreadable data (for example, connection IDs) into strings, which\\nis easier to understand than say, a binary string which when directly converted into ASCII may have things\\nlike line breaks, and other weird character codes. The function uses string.format and string.byte()\\nto convert the characters byte numerical code into hexadecimal.\\n\\n```lua\\n-- \\"Example hexadecimal string\\" in ASCII\\nlocal asciiString = \\"Example hexadecimal string\\"\\nlocal hexString = BridgeNet2.ToHex(asciiString)\\n\\nprint(hexString) -- Prints the hexadecimal form of \'Example hexadecimal string\'\\n```","params":[{"name":"regularAscii","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":97,"path":"src/init.luau"}},{"name":"ToReadableHex","desc":"Converts a string consisting of ASCII characters into a more readable (bytes are separated) string of hex. This is mostly used for\\ndebugging binary strings- it looks nicer than ToHex. There are practical applications where ToHex is used internally and never revealed\\nfor debugging- but when hexadecimal is needed for debugging (as output strings can get cluttered very very quickly), this function\\nshould be used instead.\\n\\n```lua\\n-- \\"Example hexadecimal string\\" in ASCII\\nlocal asciiString = \\"Example hexadecimal string\\"\\nlocal hexString = BridgeNet2.ToReadableHex(asciiString)\\n\\nprint(hexString) -- Prints the hexadecimal form of \'Example hexadecimal string\', but with spaces.\\n```","params":[{"name":"regularAscii","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":118,"path":"src/init.luau"}},{"name":"FromHex","desc":"Converts a hexadecimal string into a string of ASCII characters. This can be used for various purposes,\\nfor example, converting a globally uniue identifier (GUID) into a binary string, which saves data. Or you\\ncould convert a thread ID, or a memory address into a string for debugging purposes. Hexadecimal can be used\\nfor a variety of purposes. The function uses string.char alongside tonumber(string, 16) to convert the\\nhexadecimal into a character code, which is converted into ASCII.\\n\\n```lua\\n-- \\"Example hexadecimal string\\" in hex\\nlocal hexString = \\"4578616D706C652068657861646563696D616C20737472696E67\\"\\nlocal asciiString = BridgeNet2.FromHex(hexString)\\n\\nprint(asciiString) -- Prints \'Example hexadecimal string\'\\n```","params":[{"name":"hexadecimal","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":140,"path":"src/init.luau"}},{"name":"CreateUUID","desc":"Generates a new UUID (Universally Unique Identifier) in string format. This function uses the `GenerateGUID`\\nmethod provided by the HttpService object to create a new UUID, and then removes the hyphens from the string\\nbefore returning it.\\n\\n```lua\\n-- \\"Example of creating a uuid string\\"\\nlocal UUID = BridgeNet2.CreateUUID()\\n\\nprint(UUID) -- Example output: \\"F7B64066F6B94012AA5FEFCEB38352E4\\"\\n```","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":158,"path":"src/init.luau"}},{"name":"ReferenceIdentifier","desc":"Assuming you have previous knowledge on the identifier system- which, if you do not, there is a small article written in the\\ndocumentation site for BridgeNet2, `.ReferenceIdentifier` is how you initialize an identifier on the server.\\n\\nOn the client, it simply reads from the already-existing dictionary to figure out what it should return. The only difference between\\n`.FromIdentifier` and `.ReferenceIdentifier` on the client, is that ReferenceIdentifier will yield for up to 1 second until it\\nbreaks and returns the default name.\\n\\n```lua title=\\"spellHandler.client.lua\\"\\nlocal SpellCaster = BridgeNet2.ReferenceBridge(\\"SpellCaster\\")\\n\\nlocal Fireball = BridgeNet2.ReferenceIdentifier(\\"Fireball\\")\\n\\nSomeUserInputSignalHere:Connect(function(...)\\n\\tSpellCaster:Fire(Fireball) -- Fires a 1 or 2 character string, much smaller than an 8-character string.\\nend)\\n```","params":[{"name":"identifierName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":183,"path":"src/init.luau"}},{"name":"FromCompressed","desc":"The function returns a string representing the corresponding uncompressed identifier if the compressed\\nidentifier exists in BridgeNet2. If the identifier is not found, the function returns nil.\\n\\n```lua\\nlocal Identifier = BridgeNet2.ReferenceIdentifier(\\"FullIdentifierHere\\")\\n\\nprint(BridgeNet2.FromCompressed(Identifier)) -- Prints \\"FullIdentifierHere\\"\\n```","params":[{"name":"compressedIdentifier","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":200,"path":"src/init.luau"}},{"name":"FromIdentifier","desc":"The function returns a string representing the compressed form of the identifier\\nif it exists in BridgeNet2. If the identifier is not found, the function returns `nil`.\\n\\n```lua\\nlocal Identifier = BridgeNet2.ReferenceIdentifier(\\"FullIdentifierHere\\")\\n\\nprint(BridgeNet2.FromIdentifier(\\"FullIdentifierHere\\")) -- prints the compressed form of the identifier\\n```","params":[{"name":"identifierName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":217,"path":"src/init.luau"}},{"name":"AllPlayers","desc":"Returns a symbol that when passed into ServerBridge:Fire(), tells the internal server process\\nto send this data to every single player.","params":[],"returns":[{"desc":"","lua_type":"PlayerSet"}],"function_type":"static","source":{"line":227,"path":"src/init.luau"}},{"name":"PlayersExcept","desc":"This function takes a list of players, and tells the internal server process to send this data to everyone\\nexcept the specified blacklisted players.","params":[{"name":"blacklistedPlayers","desc":"","lua_type":"{ Players }"}],"returns":[{"desc":"","lua_type":"PlayerSet"}],"function_type":"static","source":{"line":238,"path":"src/init.luau"}},{"name":"Players","desc":"This function takes a list of players, and tells the internal server process to send this data to everyone\\nexcept the specified blacklisted players.","params":[],"returns":[{"desc":"","lua_type":"PlayerSet"}],"function_type":"static","source":{"line":248,"path":"src/init.luau"}},{"name":"ReferenceBridge","desc":"The `ReferenceBridge` function creates a new instance of a bridge with the specified name.\\nThe `name` argument is a string representing the name of the `ServerBridge` or `ClientBridge` instance, respectively. The name is used to create a unique identifier for the instance within the system.\\n\\n```lua\\nlocal Bridge = BridgeNet2.ReferenceBridge(\\"MyBridge\\")\\n\\nBridge:Connect(function() end)\\n```","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ServerBridge | ClientBridge"}],"function_type":"static","source":{"line":265,"path":"src/init.luau"}},{"name":"SetSecurity","desc":"Allows you to set custom functions for when a client sends incorrect data.","params":[],"returns":[{"desc":"","lua_type":"void"}],"function_type":"static","source":{"line":274,"path":"src/init.luau"}}],"properties":[],"types":[],"name":"BridgeNet2","desc":"The root namespace of BridgeNet2.","source":{"line":51,"path":"src/init.luau"}}')}}]);