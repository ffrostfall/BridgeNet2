[{"title":"Features","type":0,"sectionRef":"#","url":"/BridgeNet2/docs/Features","content":"","keywords":""},{"title":"BridgeNet2 offers a variety of features to improve performance, security, abstraction, and the API of your roblox game.​","type":1,"pageTitle":"Features","url":"/BridgeNet2/docs/Features#bridgenet2-offers-a-variety-of-features-to-improve-performance-security-abstraction-and-the-api-of-your-roblox-game","content":""},{"title":"Performance:​","type":1,"pageTitle":"Features","url":"/BridgeNet2/docs/Features#performance","content":" Significantly faster than the default systems in Roblox. Reduces the overhead of remote calls: client to server takes 5 bytes, server to client takes 2 bytes. Uses an identifier system to reduce bandwidth usage for static strings, which take 3 or 4 bytes regardless of size. Includes utilities for optimization such as FromHex, ToHex, and DictionaryToTable. Reuses threads on connections for increased efficiency. "},{"title":"Security:​","type":1,"pageTitle":"Features","url":"/BridgeNet2/docs/Features#security","content":" Customizable rate limiting for all bridges to prevent remote spamming. Provides middleware for easy typechecking and security implementation. Internally secure to protect against exploitation. "},{"title":"Abstraction:​","type":1,"pageTitle":"Features","url":"/BridgeNet2/docs/Features#abstraction","content":" Queues up remote calls to a player until they are loaded, eliminating the need to worry about the invocation queue. Abstracts instances, eliminating the need to use RemoteEvents. Abstracts away optimization tasks. Removes the need to consider client/server boundaries when defining remotes using ReferenceBridge. "},{"title":"API:​","type":1,"pageTitle":"Features","url":"/BridgeNet2/docs/Features#api","content":" Highly performant. Easy to learn and use. Replaces tuples with a more user-friendly system for strict typing. Designed to be extendable, allowing for the implementation of custom systems and whitelists. Includes a testing mode that activates a mock mode that never yields when BridgeNet.Testing(boolean) is called. "},{"title":"ServerBridge","type":0,"sectionRef":"#","url":"/BridgeNet2/api/ServerBridge","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#functions","content":" "},{"title":"OutboundMiddleware​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#OutboundMiddleware","content":"&lt;/&gt; ServerBridge.OutboundMiddleware(middlewareTable: {( player: Player , object: any ) → any}) → void Sets the middleware to be used in-between your :Fire() and actually sending it out over the RemoteEvent.  "},{"title":"OutboundMiddleware​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#OutboundMiddleware","content":"&lt;/&gt; ServerBridge.OutboundMiddleware(middlewareTable: {( target: ServerProcess.TPlayerType, object: any ) → any}) → void   "},{"title":"Connect​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#Connect","content":"&lt;/&gt; ServerBridge.Connect(middlewareTable: ( player: Player , object: T ) → nil) → void   "},{"title":"StartLogging​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#StartLogging","content":"&lt;/&gt; ServerBridge.StartLogging() → void Prints every time this bridge receives or sends data  "},{"title":"StartLogging​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#StartLogging","content":"&lt;/&gt; ServerBridge.StartLogging() → void Stops logging incoming/outgoing data  "},{"title":"RateLimit​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#RateLimit","content":"&lt;/&gt; ServerBridge.RateLimit( invokesPerSecond: number, overflowFunction: (player: Player ) → nil ) → void   "},{"title":"DisableRateLimit​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#DisableRateLimit","content":"&lt;/&gt; ServerBridge.DisableRateLimit() → void   "},{"title":"Wait​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#Wait","content":"&lt;/&gt; ServerBridge.Wait() → ... Equivalent of RemoteEvent.OnServerEvent:Wait()  "},{"title":"Fire​","type":1,"pageTitle":"ServerBridge","url":"/BridgeNet2/api/ServerBridge#Fire","content":"&lt;/&gt; ServerBridge.Fire() → void Equivalent of RemoteEvent:FireClient(), the ServerBridge:Fire() function takes a player type, or a singular player, and fires the data to the client. Important to note that it takes a singular object as a parameter instead of using tuples- this is intentional. "},{"title":"Identifiers","type":0,"sectionRef":"#","url":"/BridgeNet2/docs/Identifiers","content":"Identifiers The identifier system in BridgeNet2 uses shortened strings to represent constant, static strings and save on bandwidth. The library provides functions to easily create and read identifiers in your code, improving the efficiency of your game by reducing the amount of data transmitted over the network. Using identifiers BridgeNet2 provides functionality to create identifiers without interference in your code. ReferenceIdentifier, FromCompressed and FromIdentifier are utility functions to create and read identifiers.","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/BridgeNet2/docs/Installation","content":"","keywords":""},{"title":"With Wally​","type":1,"pageTitle":"Installation","url":"/BridgeNet2/docs/Installation#with-wally","content":"Install WallyPut BridgeNet2 in the wally.toml file under [dependencies] wally.toml [dependencies] BridgeNet2 = ffrostflame/bridgenet2@0.1.0  Run wally install "},{"title":"Without Wally​","type":1,"pageTitle":"Installation","url":"/BridgeNet2/docs/Installation#without-wally","content":""},{"title":"Option 1: Syncing with .rbxm:​","type":1,"pageTitle":"Installation","url":"/BridgeNet2/docs/Installation#option-1-syncing-with-rbxm","content":"Get the .rbxm file from the latest release.Sync manually or drop into studio manually "},{"title":"Option 2: copying source folder:​","type":1,"pageTitle":"Installation","url":"/BridgeNet2/docs/Installation#option-2-copying-source-folder","content":"Copy the src folder of the repositoryDrop into your projectRename the folder to BridgeNet2 "},{"title":"About","type":0,"sectionRef":"#","url":"/BridgeNet2/docs/intro","content":"About BridgeNet2 is an advanced networking library for Roblox that offers a range of features for optimizing, securing, and debugging network communication. Key benefits of using BridgeNet2 include its speed and how it's faster than built-in Roblox networking functions and uses less bandwidth; A load of utility features such as middleware, rate limiting, hexadecimal functions, and optimization functions; and it is fully typed. BridgeNet2 also includes security features such as the ability to control network security and the contents of messages, and it can disrupt the output of RemoteSpy logs, making it harder for exploiters to read them. Why should you use BridgeNet2? Performance: faster than roblox, less bandwidth used than Roblox.Utility features: Middleware, rate limiting, hexadecimal functions, optimization functions, and more.Botches RemoteSpy logs: Since BridgeNet2 sends a special format, it botches RemoteSpy logs and makes the output less readable for exploiters.Security: BridgeNet2 lets you have control over network security, and what the contents of your messages are.Debugging: Multiple useful features for debugging your netcode.Natively written for Luau: There's no leftover features, or half-baked features meant for typescript.No other networking library offers all of these things. Why should you use BridgeNet2 over BridgeNet? BridgeNet2 is far more advanced and resourceful than BridgeNet and other competing libraries. BridgeNet2 is more efficient, with a smaller size in the 200-remotes-a-frame stress test and faster API call times. This makes the library 75% better than Roblox in terms of performance.BridgeNet2's API is just better, with better naming, functionality, typings, and runtime typechecking.BridgeNet2 includes better utility functions such as ToReadableHex, NumberToBestForm, and more.BridgeNet2 is simpler and easier to maintain, while still offering improved security features like rate-limiting, better runtime typechecking, and better format checking.","keywords":""},{"title":"Technical Details","type":0,"sectionRef":"#","url":"/BridgeNet2/docs/Technical Details","content":"","keywords":""},{"title":"It's worth noting that Reference functions (ReferenceBridge and ReferenceIdentifier) have very different behavior depending on if the caller is the client or the server. For example: ReferenceIdentifier can yield on the client, but will never yield on the server.​","type":1,"pageTitle":"Technical Details","url":"/BridgeNet2/docs/Technical Details#its-worth-noting-that-reference-functions-referencebridge-and-referenceidentifier-have-very-different-behavior-depending-on-if-the-caller-is-the-client-or-the-server-for-example-referenceidentifier-can-yield-on-the-client-but-will-never-yield-on-the-server","content":"There are two processes in BridgeNet2: ServerProcess and ClientProcess. The ServerProcess handles communication from the server to the client using the format { [identifierName] = { {uniqueMessage}, {otherUniqueMessage} } }. It is more efficient to use the same bridge for multiple messages, but identifiers can be used to bypass this limitation. The ClientProcess handles communication from the client to the server using the format { [even] = &quot;identifier&quot;, [odd] = {uniqueMessage} }. Identifiers in BridgeNet are generated by the server and use a combination of attributes and string packing to create unique numbers. On the client, identifiers can be accessed using .FromIdentifier(), but it is safer to use .ReferenceIdentifier() as it yields until the identifier is loaded. The server keeps track of the number of identifiers in use and uses this to generate a new identifier when needed. You can find a lot of general knowledge on how Roblox does networking here "},{"title":"ClientBridge","type":0,"sectionRef":"#","url":"/BridgeNet2/api/ClientBridge","content":"On this page ClientBridge","keywords":""},{"title":"BridgeNet2","type":0,"sectionRef":"#","url":"/BridgeNet2/api/BridgeNet2","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#functions","content":" "},{"title":"NumberToBestForm​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#NumberToBestForm","content":"&lt;/&gt; BridgeNet2.NumberToBestForm(number: number) → string | number Takes a number, and converts it into its most network efficient form. This works because a number is 9 bytes- but strings are (stringLen)+2, so a 1-character string to store a 1-digit number is more efficient than sending it as an actual number. This is way better- and it shows up at any real, practical scale. If you send this number over, you should always be calling tonumber on it! That is NOT optional. -- &quot;Example hexadecimal string&quot; in ASCII local smallNumber = 4 local bigNumber = 1000000000 local smallNumberBestForm = BridgeNet2.NumberToBestForm(smallNumber) print(typeof(smallNumberBestForm)) -- prints &quot;string&quot; local bigNumberBestForm = BridgeNet2.NumberToBestForm(bigNumber) print(typeof(bigNumberBestForm)) -- prints &quot;number&quot;   "},{"title":"ToHex​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#ToHex","content":"&lt;/&gt; BridgeNet2.ToHex(regularAscii: string) → string Converts a string consisting of ASCII characters into hexadecimal. This is useful for representing binary strings and other human unreadable data (for example, connection IDs) into strings, which is easier to understand than say, a binary string which when directly converted into ASCII may have things like line breaks, and other weird character codes. The function uses string.format and string.byte() to convert the characters byte numerical code into hexadecimal. -- &quot;Example hexadecimal string&quot; in ASCII local asciiString = &quot;Example hexadecimal string&quot; local hexString = BridgeNet2.ToHex(asciiString) print(hexString) -- Prints the hexadecimal form of 'Example hexadecimal string'   "},{"title":"ToReadableHex​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#ToReadableHex","content":"&lt;/&gt; BridgeNet2.ToReadableHex(regularAscii: string) → string Converts a string consisting of ASCII characters into a more readable (bytes are separated) string of hex. This is mostly used for debugging binary strings- it looks nicer than ToHex. There are practical applications where ToHex is used internally and never revealed for debugging- but when hexadecimal is needed for debugging (as output strings can get cluttered very very quickly), this function should be used instead. -- &quot;Example hexadecimal string&quot; in ASCII local asciiString = &quot;Example hexadecimal string&quot; local hexString = BridgeNet2.ToReadableHex(asciiString) print(hexString) -- Prints the hexadecimal form of 'Example hexadecimal string', but with spaces.   "},{"title":"FromHex​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#FromHex","content":"&lt;/&gt; BridgeNet2.FromHex(hexadecimal: string) → string Converts a hexadecimal string into a string of ASCII characters. This can be used for various purposes, for example, converting a globally uniue identifier (GUID) into a binary string, which saves data. Or you could convert a thread ID, or a memory address into a string for debugging purposes. Hexadecimal can be used for a variety of purposes. The function uses string.char alongside tonumber(string, 16) to convert the hexadecimal into a character code, which is converted into ASCII. -- &quot;Example hexadecimal string&quot; in hex local hexString = &quot;4578616D706C652068657861646563696D616C20737472696E67&quot; local asciiString = BridgeNet2.FromHex(hexString) print(asciiString) -- Prints 'Example hexadecimal string'   "},{"title":"CreateUUID​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#CreateUUID","content":"&lt;/&gt; BridgeNet2.CreateUUID() → string Generates a new UUID (Universally Unique Identifier) in string format. This function uses the GenerateGUID method provided by the HttpService object to create a new UUID, and then removes the hyphens from the string before returning it. -- &quot;Example of creating a uuid string&quot; local UUID = BridgeNet2.CreateUUID() print(UUID) -- Example output: &quot;F7B64066F6B94012AA5FEFCEB38352E4&quot;   "},{"title":"ReferenceIdentifier​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#ReferenceIdentifier","content":"&lt;/&gt; BridgeNet2.ReferenceIdentifier(identifierName: string) → string Assuming you have previous knowledge on the identifier system- which, if you do not, there is a small article written in the documentation site for BridgeNet2, .ReferenceIdentifier is how you initialize an identifier on the server. On the client, it simply reads from the already-existing dictionary to figure out what it should return. The only difference between.FromIdentifier and .ReferenceIdentifier on the client, is that ReferenceIdentifier will yield for up to 1 second until it breaks and returns the default name. local SpellCaster = BridgeNet2.ReferenceBridge(&quot;SpellCaster&quot;) local Fireball = BridgeNet2.ReferenceIdentifier(&quot;Fireball&quot;) SomeUserInputSignalHere:Connect(function(...) SpellCaster:Fire(Fireball) -- Fires a 1 or 2 character string, much smaller than an 8-character string. end)   "},{"title":"FromCompressed​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#FromCompressed","content":"&lt;/&gt; BridgeNet2.FromCompressed(compressedIdentifier: string) → string The function returns a string representing the corresponding uncompressed identifier if the compressed identifier exists in BridgeNet2. If the identifier is not found, the function returns nil. local Identifier = BridgeNet2.ReferenceIdentifier(&quot;FullIdentifierHere&quot;) print(BridgeNet2.FromCompressed(Identifier)) -- Prints &quot;FullIdentifierHere&quot;   "},{"title":"FromIdentifier​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#FromIdentifier","content":"&lt;/&gt; BridgeNet2.FromIdentifier(identifierName: string) → string The function returns a string representing the compressed form of the identifier if it exists in BridgeNet2. If the identifier is not found, the function returns nil. local Identifier = BridgeNet2.ReferenceIdentifier(&quot;FullIdentifierHere&quot;) print(BridgeNet2.FromIdentifier(&quot;FullIdentifierHere&quot;)) -- prints the compressed form of the identifier   "},{"title":"AllPlayers​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#AllPlayers","content":"&lt;/&gt; BridgeNet2.AllPlayers() → PlayerSet Returns a symbol that when passed into ServerBridge:Fire(), tells the internal server process to send this data to every single player.  "},{"title":"PlayersExcept​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#PlayersExcept","content":"&lt;/&gt; BridgeNet2.PlayersExcept(blacklistedPlayers: {Players }) → PlayerSet This function takes a list of players, and tells the internal server process to send this data to everyone except the specified blacklisted players.  "},{"title":"Players​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#Players","content":"&lt;/&gt; BridgeNet2.Players() → PlayerSet This function takes a list of players, and tells the internal server process to send this data to everyone except the specified blacklisted players.  "},{"title":"ReferenceBridge​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#ReferenceBridge","content":"&lt;/&gt; BridgeNet2.ReferenceBridge(name: string) → ServerBridge | ClientBridge The ReferenceBridge function creates a new instance of a bridge with the specified name. The name argument is a string representing the name of the ServerBridge or ClientBridge instance, respectively. The name is used to create a unique identifier for the instance within the system. local Bridge = BridgeNet2.ReferenceBridge(&quot;MyBridge&quot;) Bridge:Connect(function() end)   "},{"title":"SetSecurity​","type":1,"pageTitle":"BridgeNet2","url":"/BridgeNet2/api/BridgeNet2#SetSecurity","content":"&lt;/&gt; BridgeNet2.SetSecurity() → void Allows you to set custom functions for when a client sends incorrect data. "}]